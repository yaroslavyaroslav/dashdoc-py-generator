name: Doc2Dash

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install doc2dash
      run: |
        python -m pip install --upgrade pip
        pip install doc2dash

    - name: Extract information from commit or PR
      id: extract_info
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          # For pull requests, extract from the PR body
          COMMIT_MESSAGE=""
          PR_BODY="${{ github.event.pull_request.body }}"

          URL=$(echo "$PR_BODY" | grep -Eo 'URL: .*' | cut -d' ' -f2-)
          DOCS_PATH=$(echo "$PR_BODY" | grep -Eo 'DOCS_PATH: .*' | cut -d' ' -f2-)
          BUILD_COMMAND=$(echo "$PR_BODY" | grep -Eo 'BUILD_COMMAND: .*' | cut -d' ' -f2-)
          PACKAGE_NAME=$(echo "$PR_BODY" | grep -Eo 'PACKAGE_NAME: .*' | cut -d' ' -f2-)
        else
          # For pushes, extract from the commit message
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          PR_BODY=""

          URL=$(echo "$COMMIT_MESSAGE" | grep -Eo 'URL: .*' | cut -d' ' -f2-)
          DOCS_PATH=$(echo "$COMMIT_MESSAGE" | grep -Eo 'DOCS_PATH: .*' | cut -d' ' -f2-)
          BUILD_COMMAND=$(echo "$COMMIT_MESSAGE" | grep -Eo 'BUILD_COMMAND: .*' | cut -d' ' -f2-)
          PACKAGE_NAME=$(echo "$COMMIT_MESSAGE" | grep -Eo 'PACKAGE_NAME: .*' | cut -d' ' -f2-)
        fi

        echo "URL=$URL" >> $GITHUB_ENV
        echo "DOCS_PATH=$DOCS_PATH" >> $GITHUB_ENV
        echo "BUILD_COMMAND=$BUILD_COMMAND" >> $GITHUB_ENV
        echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV

    - name: Clone package repository
      run: |
        git clone ${{ env.URL }} package_repo

    - name: Build documentation
      run: |
        cd package_repo
        if [ -n "${{ env.BUILD_COMMAND }}" ]; then
          eval ${{ env.BUILD_COMMAND }}  # Execute the build command
        fi

    - name: Check if docs directory exists
      run: |
        cd package_repo
        if [ ! -d "${{ env.DOCS_PATH }}" ]; then
          echo "Documentation path does not exist: ${{ env.DOCS_PATH }}"
          exit 1
        fi

    - name: Run doc2dash
      run: |
        cd package_repo
        doc2dash -n "${{ env.PACKAGE_NAME }}" -d docset ${{ env.DOCS_PATH }}

    - name: Upload docset as artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: package_repo/docset